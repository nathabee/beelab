"""
Django settings for django config project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
#from dotenv import load_dotenv
import logging
logging.getLogger("PIL").setLevel(logging.WARNING)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# Load environment variables from .env 
# this is not necessary with compose: docker compose is already doing that 
#load_dotenv(os.path.join(BASE_DIR, '.env'))

# SECURITY WARNING: Keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: Don't run with debug turned on in production!
#DEBUG = os.getenv('DEBUG', 'False') == 'True'
DEBUG = True

ALLOWED_HOSTS =  os.getenv("DJANGO_ALLOWED_HOSTS", "*").split(",")
print ( "ALLOWED_HOSTS=", ALLOWED_HOSTS)

AUTH_USER_MODEL = "usercore.CustomUser"  #small because it must be label


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    "drf_spectacular", 
    'django.contrib.staticfiles',
    'rest_framework',  # Add Django REST Framework 
    "rest_framework_simplejwt",  # good to have
    'UserCore.apps.UserCoreConfig',
    'PomoloBeeCore.apps.PomoloBeeCoreConfig',  # main app  
    'CompetenceCore.apps.CompetenceCoreConfig',  # main app  
    'corsheaders',   #DEV ONLY 
]
 
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication", 
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',  # Use AutoSchema to genera
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware', 
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases



# Database Configuration (Using Environment Variables)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DATABASE_NAME'),
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        'HOST': os.getenv('DATABASE_HOST', 'localhost'),
        'PORT': os.getenv('DATABASE_PORT', '5432'),
    }
}



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Dev-only: allow WP origin
CORS_ALLOWED_ORIGINS = [
    "http://localhost:9082",
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_ROOT = os.getenv('STATIC_ROOT', '/app/staticfiles') 
STATIC_URL = os.getenv('STATIC_URL', '/static/') 
DEFAULT_USER_PASSWORD = os.getenv('DEFAULT_USER_PASSWORD', 'DjangoPwd') 


# Media Storage Configuration , Enable media serving in development
# BYPASS_MEDIA = os.getenv('BYPASS_MEDIA', 'False') == 'True'

#MEDIA_URL = "/media/"
#MEDIA_ROOT = "/app/media" 
BYPASS_MEDIA=0
MEDIA_URL = os.getenv('MEDIA_URL', '/media/')  # Load from .env
MEDIA_ROOT = os.getenv('MEDIA_ROOT', BASE_DIR / 'media')  # Default to 'media/' in development

# In production, Django does NOT serve media files
#if not BYPASS_MEDIA:
#    DEFAULT_FILE_STORAGE = os.getenv('DEFAULT_FILE_STORAGE', 'django.core.files.storage.FileSystemStorage')


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

ML_API_URL = os.getenv("ML_API_URL", "http://localhost:5000/ml")  # Default to local ML server


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {  # Log to terminal
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',  # Set root level to DEBUG
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        '__main__': {  # This is for standalone scripts, probably not used here
            'handlers': ['console'],
            'level': 'DEBUG',
        },
        'core': {  # Assuming your app is called 'core'
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}


SPECTACULAR_SETTINGS = {
    "TITLE": "BeeLab API",
    "DESCRIPTION": "Django backend for PomoloBee and Competence.",
    "VERSION": "0.1.0",
    "SERVERS": [{"url": "http://localhost:9001"}],
    "COMPONENT_SPLIT_REQUEST": True,
    "SCHEMA_PATH_PREFIX": r"/api/",
    "SECURITY": [{"BearerAuth": []}],
    "COMPONENTS": {
        "securitySchemes": {
            "BearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
            }
        }
    },
    'CONTACT': {
        'name': 'BeeLab API Support',
        'email': 'nathabee123@gmail.com',
    },
    'LICENSE': {
        'name': 'MIT',
        'url': 'https://opensource.org/licenses/MIT',
    },
    'SERVE_INCLUDE_SCHEMA': False,  # Don't expose the schema automatically
}