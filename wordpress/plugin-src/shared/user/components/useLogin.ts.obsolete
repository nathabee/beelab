// shared/user/useLogin.ts
'use client';

import { useState } from 'react';
import { useUser } from './UserContext';
import { apiUser, authHeaders } from './http';

export type LangCode = 'en' | 'fr' | 'de' | 'bz';
export type BootstrapOpts = { force?: boolean };
export type BootstrapFn = (token: string, opts?: BootstrapOpts) => Promise<void> | void;

export type DemoOpts = {
  roles?: string[];       // e.g. ['teacher'] or ['farmer']
  preferredName?: string; // optional "First Last"
  lang?: LangCode;        // optional language hint
};

export function useLoginHandler(opts?: { bootstrap?: BootstrapFn }) {
  const bootstrap = opts?.bootstrap;
  const { login } = useUser();
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  const handleLogin = async (
    username: string,
    password: string,
    onSuccess: () => void
  ) => {
    try {
      const authResp = await apiUser.post('/auth/login/', { username, password });
      const { access: token } = authResp.data;

      const meResp = await apiUser.get('/users/me/', { headers: authHeaders(token) });
      const userInfo = meResp.data;

      login(token, userInfo);
      if (bootstrap) await bootstrap(token, { force: true });
      onSuccess();
    } catch (e: any) {
      if (e?.response?.status === 401) setErrorMessage('Invalid username or password');
      else if (e?.response?.status === 403) setErrorMessage('Your account is not permitted to access this application.');
      else setErrorMessage('Connection error');
      console.error('Login failed:', e?.response?.status, e?.response?.data || e);
    }
  };

  // Accept roles[] directly + preferredName + lang (all optional)
  const handleDemoStart = async (
    onSuccess: () => void,
    opts: DemoOpts = {}
  ) => {
    try {
      const body: any = { roles: Array.isArray(opts.roles) && opts.roles.length ? opts.roles : ['teacher'] };
      if (opts.preferredName?.trim()) body.preferred_name = opts.preferredName.trim();
      if (opts.lang) body.lang = opts.lang;

      const startResp = await apiUser.post('/auth/demo/start/', body, { withCredentials: true });
      const { access: token } = startResp.data;

      const meResp = await apiUser.get('/users/me/', { headers: authHeaders(token), withCredentials: true });
      const userInfo = meResp.data;

      login(token, userInfo);
      if (bootstrap) await bootstrap(token, { force: true });
      onSuccess();
    } catch (e: any) {
      setErrorMessage('Could not start demo right now.');
      console.error('Demo start failed:', e?.response?.status, e?.response?.data || e);
    }
  };

  return { handleLogin, handleDemoStart, errorMessage };
}
